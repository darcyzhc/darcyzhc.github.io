<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cross The Wall</title>
      <link href="/2020/04/29/cross-the-wall/"/>
      <url>/2020/04/29/cross-the-wall/</url>
      
        <content type="html"><![CDATA[<h2 id="翻墙方法整理"><a href="#翻墙方法整理" class="headerlink" title="翻墙方法整理"></a>翻墙方法整理</h2><h3 id="1、VPN"><a href="#1、VPN" class="headerlink" title="1、VPN"></a>1、VPN</h3><p>目前真正完全免费的VPN很少，少数真正免费的VPN也是要看很多广告的，并且连接经常不稳定。</p><p>目前在Android上用着还行的一个免费VPN就是Ultimate VPN，没找到官网，谷歌商店的地址是：<a href="https://play.google.com/store/apps/details?id=com.open.hotspot.vpn.free&amp;hl=en_US" target="_blank" rel="noopener">Ultimate VPN</a>。</p><p>在IOS平台上的一个真正免费的VPN是<a href="https://downloads.digitaltrends.com/vpn-super-unlimited-proxy/ios" target="_blank" rel="noopener">VPN-Super Unlimited Proxy</a>。国区账号无法下载，需要其他地区的Apple ID才能下载。</p><p>付费VPN有很多，通过<a href="https://cn.bing.com/?FORM=BEHPTB&amp;ensearch=1" target="_blank" rel="noopener">bing国际版</a>或者<a href="https://yandex.com/" target="_blank" rel="noopener">yandex</a>使用英文关键词可以搜索到VPN的更多信息。</p><p>相对来说，VPN的收费稍微有点高，所以比较划算的方式还是使用SS(SSR)和V2Ray这种代理服务器比较划算。</p><h3 id="2、代理"><a href="#2、代理" class="headerlink" title="2、代理"></a>2、代理</h3><p>（1）第一种是SSR代理服务器搭建，下面是完整自建服务器教程以及使用教程:</p><p><a href="https://github.com/Alvin9999/new-pac/wiki/自建ss服务器教程" target="_blank" rel="noopener">自建ss服务器教程</a></p><blockquote><p>下面是Github上共享的一些免费节点：</p><p><a href="https://github.com/zmike1993/hello-world/wiki/SSR免费节点（实时更新）" target="_blank" rel="noopener">SSR免费节点（实时更新）</a></p></blockquote><p>（2）由于现在SSR的效果不是很好，所以比较推荐V2Ray，原理类似于SSR。下面是搭建的详细教程以及使用教程：</p><p><a href="https://github.com/233boy/v2ray/wiki/V2Ray搭建详细图文教程" target="_blank" rel="noopener">V2Ray搭建详细图文教程</a></p><blockquote><p><a href="http://main.v2ray.cx/aff.php?aff=957" target="_blank" rel="noopener">v2net</a>是一个按流量收费的基于V2Ray的代理平台，对于不经常用来看视频的用户非常推荐。</p><p><a href="https://justmysocks2.net/members/cart.php?gid=1" target="_blank" rel="noopener">Just My Socks</a>也是基于V2Ray的代理平台，是按时收费的，性价比一般，免去了自建服务器了麻烦。</p></blockquote><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><p>可用于下载付费App的Apple ID：</p><ol><li>用于下载Shadowrocket：</li></ol><pre><code>账号: rocket@404.wf密码: 404.WF@404.wf</code></pre><ol start="2"><li>用于下载QuantumultX：</li></ol><pre><code>账号：quan@404.wf密码：A@404.wf</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2Ray </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客系统使用说明</title>
      <link href="/2020/04/15/bo-ke-xi-tong-shi-yong-shuo-ming/"/>
      <url>/2020/04/15/bo-ke-xi-tong-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍了Hexo编写博客的流程，记录了在原主题上做的修改，博客系统迁移流程，博客SEO方法及其优化，还有Hexo内容生成原理，以及一些相关的资源链接。</p></blockquote><h2 id="写博客流程"><a href="#写博客流程" class="headerlink" title="写博客流程"></a>写博客流程</h2><ol><li>在<code>./source/_posts</code>文件夹新建<code>.md</code>文档，或者在根目录执行以下命令（推荐）, 补全生成文档的头信息，然后编写博客内容</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><ol start="2"><li>生成静态文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><ol start="3"><li>部署到Github</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="博客系统优化说明"><a href="#博客系统优化说明" class="headerlink" title="博客系统优化说明"></a>博客系统优化说明</h2><blockquote><p>本博客系统相比于原生的<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>主题做了一些代码上的修改</p></blockquote><h3 id="1-Gitalk评论系统优化"><a href="#1-Gitalk评论系统优化" class="headerlink" title="1. Gitalk评论系统优化"></a>1. Gitalk评论系统优化</h3><blockquote><p>因为gitalk使用的是GitHub的issue功能实现的评论系统，所以每次加载时都需要访问GitHub，而在国内访问的网络情况有时不太好，造成评论加载不出来或者评论者的头像加载不出来，针对这个问题我做了一些优化</p></blockquote><ol><li>当评论完全加载不出来时，会出现 <font color="red">Error: Network Error</font> 的提示，这样的颜色太显眼，以及内容不友好。可以通过修改<code>./themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js</code>对应位置的内容来修改错误提示的内容，同样可以修改<code>./themes/hexo-theme-matery/source/libs/gitalk/gitalk.css</code>对应位置的内容来修改字体颜色和大小.</li><li>当评论加载出来了但是头像加载不出来时就会产生图片空缺位，很影响美观，可以在<code>./themes/hexo-theme-matery/layout/_partial/gitalk.ejs</code>最后添加下面的代码，可以使用默认的头像进行替代.</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">getMyHashCode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>caseSensitive<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>caseSensitive<span class="token punctuation">)</span><span class="token punctuation">{</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token number">1315423911</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>ch<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hash <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">+</span> <span class="token punctuation">(</span>hash <span class="token operator">></span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">imgErrorProcess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> elem <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'img'</span> <span class="token operator">&amp;&amp;</span> elem<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"darcyuniqueimglabel"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/medias/erravatardarcy/"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> name <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"alt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> imgNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getMyHashCode</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">50</span><span class="token punctuation">;</span>                elem<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'/medias/erravatardarcy/'</span><span class="token operator">+</span>imgNum<span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>     document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> imgErrorProcess<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*指定事件处理函数在捕获阶段执行*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-文章阅读界面优化"><a href="#2-文章阅读界面优化" class="headerlink" title="2. 文章阅读界面优化"></a>2. 文章阅读界面优化</h3><p>在阅读文章时，顶部的导航栏占据了很大部分的显示区域，所以我将其改为了在滑动到正文的时候就隐藏顶部的导航栏，任何时候只要向上滑动就显示出导航栏。将下面代码添加到<code>./themes/hexo-theme-matery/layout/_partial/post-detail.ejs</code>即可实现该功能.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 文章内容详情页面对顶部导航栏的隐藏于显示 <span class="token operator">--</span><span class="token operator">></span>   THEIGHT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> docscroH <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//滚动高度</span>           <span class="token keyword">var</span> winH <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可见高度 </span>           <span class="token keyword">var</span> docH <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//内容高度</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>docscroH <span class="token operator">-</span> THEIGHT <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>docscroH <span class="token operator">>=</span> <span class="token number">99</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>docH <span class="token operator">-</span> <span class="token punctuation">(</span>docscroH <span class="token operator">+</span> winH<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//距离顶部大于100px且距离底部大于50时</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>THEIGHT<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#headNav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#headNav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>docH <span class="token operator">-</span> <span class="token punctuation">(</span>docscroH <span class="token operator">+</span> winH<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//滚动条滑到底部</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#headNav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#headNav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">;</span>                   THEIGHT <span class="token operator">=</span> docscroH<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客系统迁移"><a href="#博客系统迁移" class="headerlink" title="博客系统迁移"></a>博客系统迁移</h2><ol><li><p>将完整的<code>Blog</code>文件夹拷贝（可以使用Github同步或者OneDrive等云服务同步）到新的电脑上；</p></li><li><p>在新的电脑上安装<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>(建议使用 Node.js 10.0 及以上版本)，安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝 Git for Windows 镜像</a> 下载 git 安装包；</p></li><li><p>使用以下命令安装<code>Hexo</code>：</p><pre class="line-numbers language-shell"><code class="language-shell">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="4"><li>迁移完成，即可正常使用。</li></ol><h2 id="博客SEO"><a href="#博客SEO" class="headerlink" title="博客SEO"></a>博客SEO</h2><ol><li><a href="https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/" target="_blank" rel="noopener">Hexo 博客提交百度、谷歌搜索引擎收录</a></li><li><a href="https://www.xiemingzhao.com/posts/HexoblogSE.html" target="_blank" rel="noopener">Hexo博客提交链接到搜索引擎来收录</a></li><li><a href="http://duansm.top/2018/08/08/hexo-sitemap/" target="_blank" rel="noopener">百度和谷歌收录博客</a></li><li><a href="https://phantomt.github.io/2019/05/02/Hexo-001-sitemap/" target="_blank" rel="noopener">Hexo进行SEO优化，添加Sitemap</a></li></ol><h2 id="Hexo工作原理"><a href="#Hexo工作原理" class="headerlink" title="Hexo工作原理"></a>Hexo工作原理</h2><h3 id="Hexo文件生成方式"><a href="#Hexo文件生成方式" class="headerlink" title="Hexo文件生成方式"></a>Hexo文件生成方式</h3><ol><li>系统插件生成</li></ol><p>这一部分内容是由<code>/node_modules</code>文件夹中的各种生成器生成的，典型代表就是<code>archives</code>、<code>categories</code>和<code>tags</code>文件夹，这三个文件夹的内容分别是由<code>/node_modules</code>文件夹中的<code>hexo-generator-archive</code>、<code>hexo-generator-category</code>和<code>hexo-generator-tag</code>三个生成器生成的。更多生成器可以去<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo插件网站</a>查找。</p><ol start="2"><li>用户内容生成</li></ol><p>这一部分内容就是根据用户在<code>/source</code>文件夹以及<code>/source/_posts</code>文件夹中的<code>.md</code>以及<code>.html</code>文件生成的。其中<code>.md</code>文件需要根据其<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-matter</a>中指定的layout进行生成（这里的layout是在主题文件夹的<code>/source</code>文件夹中的EJS文件），<code>.html</code>文件则直接复制过去。如<code>/source/about/index.md</code>生成后的文件就是<code>/public/about/index.html</code>。<code>/source/_posts</code>文件夹中的<code>.md</code>文件生成后就在对应的日期文件夹中。</p><h3 id="layout中部分变量说明"><a href="#layout中部分变量说明" class="headerlink" title="layout中部分变量说明"></a>layout中部分变量说明</h3><blockquote><p>更全的详细信息见官网的<a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">变量说明</a></p></blockquote><ol><li>单个<a href="https://ejs.co/" target="_blank" rel="noopener">EJS</a>文件中定义的局部变量可以直接使用JavaScript语法定义，如：</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token keyword">var</span> menuMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">,</span> <span class="token string">"首页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Tags"</span><span class="token punctuation">,</span> <span class="token string">"标签"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Categories"</span><span class="token punctuation">,</span> <span class="token string">"分类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Archives"</span><span class="token punctuation">,</span> <span class="token string">"归档"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"About"</span><span class="token punctuation">,</span> <span class="token string">"关于"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Contact"</span><span class="token punctuation">,</span> <span class="token string">"留言"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Friends"</span><span class="token punctuation">,</span> <span class="token string">"友链"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> configRoot <span class="token operator">=</span> config<span class="token punctuation">.</span>root    configRoot <span class="token operator">=</span> <span class="token punctuation">(</span>configRoot <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> configRoot <span class="token operator">===</span> undefined <span class="token operator">||</span> configRoot <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> configRoot<span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>主题配置文件变量，使用方法是<code>theme.name</code></li><li>Hexo系统配置文件变量，使用方法是<code>config.name</code></li><li>还有一个<a href="https://hexo.io/zh-cn/docs/data-files.html" target="_blank" rel="noopener">数据文件夹</a>功能，要将json或yaml文件放在<code>/source/_data</code>中，然后可以通过<code>site.data.fileName</code>来获取其中的数据。使用示例如下：</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>article id<span class="token operator">=</span><span class="token string">"friends-link"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>myda<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> friends <span class="token operator">=</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>friends<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row tags-posts friend-all"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> friends<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> friend <span class="token operator">=</span> friends<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m6 l4 friend-div"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card frind-card&lt;%- ((i % 10) +1) %>"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"frind-ship"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;%- url_for(friend.avatar) %>"</span> alt<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>h1 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"friend-name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> friend<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                            <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token string">"position: relative;top: -35px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> friend<span class="token punctuation">.</span>introduction <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"friend-button"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(friend.url) %>"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span>                            <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"button button-glow button-rounded button-caution"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> friend<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>有一种<a href="https://hexo.io/zh-cn/docs/internationalization.html#%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener">双下划线函数变量</a>，使用格式如下所示。这种变量目前都是用来提取主题的language文件夹对应文件中的变量。下例中的<code>__('publishDate')</code>表示的是当前语言文件中<code>publishDate</code>变量的值。</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-date info-break-policy"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"far fa-calendar-minus fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'publishDate'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'publishDate'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">date</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面是一些制作Hexo主题的教程，里面也包含了对Hexo工作原理的解析：</p><p><a href="https://www.cnblogs.com/yyhh/p/11058985.html" target="_blank" rel="noopener">Hexo主题开发</a></p><p><a href="https://molunerfinn.com/make-a-hexo-theme/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">Hexo主题开发经验杂谈</a></p></blockquote><h2 id="相关资源参考"><a href="#相关资源参考" class="headerlink" title="相关资源参考"></a>相关资源参考</h2><p>好用的配色网站：<a href="https://www.materialpalette.com/colors" target="_blank" rel="noopener">主题配色</a><br>网站设计图标：<a href="https://fa5.dashgame.com/" target="_blank" rel="noopener">图标</a><br>搭建博客网站可以参考的教程：<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">Guideline Blog</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>User Guide</title>
      <link href="/2020/04/15/user-guide/"/>
      <url>/2020/04/15/user-guide/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手册 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的应用</title>
      <link href="/2017/05/20/lian-biao-de-ying-yong/"/>
      <url>/2017/05/20/lian-biao-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：求相邻k个节点数值之和最大的第一节点"><a href="#题目：求相邻k个节点数值之和最大的第一节点" class="headerlink" title="题目：求相邻k个节点数值之和最大的第一节点"></a>题目：求相邻k个节点数值之和最大的第一节点</h1><p>输入数据（设为整型）建立单链表，并求相邻k个节点data值之和为最大的第一节点。例如输入k = 2，数据为<code>2 6 4 7 3 #</code>（#为结束符），建立下面链表，运行结果输出（序号3，data值4）：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTIwMDEwNTM1MTE2?x-oss-process=image/format,png" alt="题目描述"></p><h2 id="一、-问题分析与算法思路"><a href="#一、-问题分析与算法思路" class="headerlink" title="一、 问题分析与算法思路"></a>一、 问题分析与算法思路</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先将问题分解为3个步骤：数据输入—&gt;数据处理—&gt;结果输出<br>&nbsp;&nbsp;&nbsp;&nbsp; 题目给定使用链表来保存整型数据，并且只需要求某个节点及其后面k-1个节点的和，所以采用单向非循环链表实现。<br>&nbsp;&nbsp;&nbsp;&nbsp; 然后分为3个模块来实现：</p><ol><li><p>主函数<code>main()</code>：<br>  a. 实现数据的输入。数据可以从键盘输入也可以从.txt文件输入。从键盘输入时要检查结束符“#”，当遇到结束符时结束此次输入，然后进行数据处理。如果从文件输入则首先判断该文件是否是.txt格式，如果不是则输出错误提示，选择重新输入或者退出程序。如果是.txt文件则进行文件读取，文件中的整型数据以空格符隔开，遇到结束符“#”时结束读取，若在遇到结束符之前遇到了非整型数据则输出错误提示，然后选择重新输入或者退出程序。<br>  b. 调用数据处理模块进行数据处理。输入数据建立链表后让用户输入k的值然后进行求解。<br>  c. 实现数据输出。输出当前操作的结果之后继续输出提示，让用户选择是继续对当前链表数据求相邻k个节点data值之和为最大的第一节点还是重新输入数据求相邻k个节点data值之和为最大的第一节点，亦或者是结束当前程序。<br>  d. 结束程序。当输出数据之后，在用户选择结束程序后，退出当前程序。</p></li><li><p>建表函数：<code>Creatlist()</code>：</p><pre><code>建立一个表头为空的单向非循环链表，然后将输入数据依次存入链表。</code></pre></li><li><p>求值函数：<code>Adjmax(L, k)</code>：</p><pre><code>求值函数将从链表的第一个元素开始，一直遍历到第（LisLength（L）- k + 1）个元素，每次遍历都求出从该元素起到其后第k-1个元素止的k个元素的和，然后比较每个和的大小，返回和最大时的第一节点。求值函数在进行遍历求和比较时，不是每次都把第一个数与其后共k个数依次相加，而是采用“滑动窗口”式求和。如下图所示：</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;当k=3时，从第一个节点data=2开始，计算连续3个节点和，为2+6+4=12。然后“窗口”向右移动一个节点，这时计算“窗口”内数据和时不再是遍历相加得到6+4+7=17了，而是利用上一次的和12减去上一个“窗口”的第一个数2，然后再加上当前“窗口”的最后一个数7，即12-2+7=17。这样每次计算和时，只需要做3个数的加减运算，而不再需要将“窗口”内的k个数依次遍历一遍求和了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTIwMDEwMzE0MjI0?x-oss-process=image/format,png" alt="滑动窗口"></p></li></ol><h2 id="二、程序实现"><a href="#二、程序实现" class="headerlink" title="二、程序实现"></a>二、程序实现</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 该程序给出了完整的提示：包括选择数据输入方式（键盘输入或者txt文件输入）提示，还有对错误输入时的提醒，比如文件选择方式错误，选择的文件类型错误等。在程序运行结束后还提供了是否继续进行操作的选择。<br>（该程序在Visual Studio 2015环境下测试通过）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*求相邻k个节点数值之和最大的第一节点输入数据（设为整型）建立单链表，并求相邻k个节点data值之和为最大的第一节点。例如输入k = 2，数据为2 6 4 7 3 #（#为结束符），建立下面链表，运行结果输出（序号3，data值4）*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> FILEDIR_SIZE 200  </span><span class="token comment" spellcheck="true">//定义要输入的文件的目录的长度</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>linknode<span class="token punctuation">,</span><span class="token operator">*</span>link<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Creatlink</span><span class="token punctuation">(</span>link L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  链表创建函数</span><span class="token keyword">void</span> <span class="token function">addTolink</span><span class="token punctuation">(</span>link L<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  链表添加函数</span><span class="token keyword">void</span> <span class="token function">Adjmax</span><span class="token punctuation">(</span>link L<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//查找函数</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//字符串截取函数，用于判断输入的文件是否是txt类型</span><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>link L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//链表的长度，用于判断k是否合法</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    link List <span class="token punctuation">;</span>    <span class="token keyword">int</span>  sel<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//选择是否继续</span>    List <span class="token operator">=</span> <span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>linknode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>sel<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> repeat <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//链表创建之前先释放</span>        <span class="token function">Creatlink</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>repeat <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"Please input k:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Adjmax</span><span class="token punctuation">(</span>List<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"Continue to input k(input 1) or Exit(input 0):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>repeat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"Continue to input the link data(input 1) or Exit(input 0):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span>  <span class="token function">Creatlink</span><span class="token punctuation">(</span>link L<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//创建链表函数，数据可选择从键盘输入或者从文件读入，可复用</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> in<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个字符数组来保存输入的值</span>    <span class="token keyword">char</span> fsuffix<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//存放文件后缀，判断是否是txt类型</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----Input from the keyboard(input \"K\") or the file(input \"F\")-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提示用户：输入K代表从键盘输入数据，输入F则是从文件读取数据</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'K'</span> <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'F'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果用户输入的既不是K也不是F则提示用户重新输入</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Illegal input !!! please choose again......\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'F'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果选择的是文件输入</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input the absolute path of a txt file:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存用户指定输入的文件</span>        <span class="token keyword">char</span> fileDir<span class="token punctuation">[</span>FILEDIR_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> fileDir<span class="token punctuation">,</span> FILEDIR_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        errno_t err<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">fopen_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fp<span class="token punctuation">,</span> fileDir<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">right</span><span class="token punctuation">(</span>fsuffix<span class="token punctuation">,</span> fileDir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"txt"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果打开不成功,或者打开的不是txt格式文件</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The file can't be found or the file type can't be allowed, please input again:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> fileDir<span class="token punctuation">,</span> FILEDIR_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">EOF</span> <span class="token operator">!=</span> <span class="token function">fscanf_s</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">addTolink</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'K'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please start to input the link data, end with '#':\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token string">'!'</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">addTolink</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">addTolink</span><span class="token punctuation">(</span>link L<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    link  p<span class="token operator">=</span>L<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        r <span class="token operator">=</span> <span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>linknode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>data <span class="token operator">=</span> key<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> r<span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Adjmax</span><span class="token punctuation">(</span>link L<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> length<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"The k is illegal, please try again\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    link result<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> q <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//result用于存放和最大的第一节点，r用于遍历求和</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始值为-1，防止result为空指针引发异常</span>    <span class="token keyword">int</span> sumt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//存放临时的和</span>    <span class="token keyword">int</span> order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ordert<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//记录临时序号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//使p指向以q开头的连续k个节点序列的最后一个节点。q、p分别为“窗口”开始和结束</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ordert<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ordert <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sumt <span class="token operator">=</span> sumt <span class="token operator">+</span> p<span class="token operator">-></span>data <span class="token operator">-</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//滑动窗口法计算和</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            r <span class="token operator">=</span> q<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//计算连续k个数的和</span>            <span class="token punctuation">{</span>                sumt <span class="token operator">+</span><span class="token operator">=</span> r<span class="token operator">-></span>data<span class="token punctuation">;</span>                r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sumt <span class="token operator">></span> sum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum <span class="token operator">=</span> sumt<span class="token punctuation">;</span>            result <span class="token operator">=</span> q<span class="token punctuation">;</span>            order <span class="token operator">=</span> ordert<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先只移动尾指针p</span>    <span class="token punctuation">}</span>    <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"序号%d，data值%d\n"</span><span class="token punctuation">,</span>order<span class="token punctuation">,</span>result<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>link L<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//链表释放函数</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        link q <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">,</span> p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//截取src的最后3位赋值给dst，用于判断文件名</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> src<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>q <span class="token operator">=</span> dst<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">></span>len<span class="token punctuation">)</span> n <span class="token operator">=</span> len<span class="token punctuation">;</span>    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从右边第n个字符开始，到0结束</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*void Adjmax(link L, int k)      //该函数运行时需注释掉，这个为普通算法，上面的为滑动窗口法{    if (!(k &lt; length + 1 &amp;&amp; k>0))    {        printf_s("The k is illegal, please try again\n");        return;    }    link result = NULL, r, p = L, q = L->next;   //result用于存放和最大的第一节点，r用于遍历求和    int sum = 0;    int sumt = 0;       //存放临时的和    int order = 0;    int ordert = 0;   //记录临时序号    for (int i = 0; i &lt; k; i++)   //使p指向以q开头的连续k个节点序列的最后一个节点。q、p分别为“窗口”开始和结束    {        if (p->next)            p = p->next;    }    while (p)    {        ordert++;        {            r = q;            sumt = 0;            for (int j = 0; j &lt; k; j++)     //计算连续k个数的和            {                sumt += r->data;                r = r->next;            }        }        if (sumt > sum)        {            sum = sumt;            result = q;            order = ordert;        }        p = p->next;  //向后移动尾指针p和q        q = q->next;    }    printf_s("序号%d，data值%d\n", order, result->data);}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、结果分析"><a href="#三、结果分析" class="headerlink" title="三、结果分析"></a>三、结果分析</h2><ol><li>测试思路：先选用键盘输入方式，然后开始输入一串数据，#结束，然后输入k的值，正确输出结果。然后选择仍用改组数据，但是用新的k进行计算。<br>&nbsp;&nbsp;&nbsp;&nbsp;当新的k小于（在此为0）或大于边界（该测试是6，数据长度为5）时，提示错误，然后选择重新输入，输入正确时正确输出。<br>&nbsp;&nbsp;&nbsp;&nbsp;然后不退出程序，选择重新从键盘输入测试数据。这时链表会进行清空重置。接下来的测试数据只有一个数，k只能为1，结果正确。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTIwMDEwOTA5MTk3?x-oss-process=image/format,png" alt="正确测试结果"></li></ol><p>若测试输入的数据为0个，则k无有效值。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTIwMDEwOTM4MTE5?x-oss-process=image/format,png" alt="异常测试结果"></p><ol start="2"><li>算法和结果的有效性分析<br>&nbsp;&nbsp; 由普通算法实现所用平均时间约为5秒（数据规模为50000+，测试文件为138kB的<code>txt</code>文件。）<br>&nbsp;&nbsp; 普通算法的计算函数代码如下：</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Adjmax</span><span class="token punctuation">(</span>link L<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"The k is illegal, please try again\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    link result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> p <span class="token operator">=</span> L<span class="token punctuation">,</span> q <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//result用于存放和最大的第一节点，r用于遍历求和</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sumt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//存放临时的和</span>    <span class="token keyword">int</span> order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ordert <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//记录临时序号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//使p指向以q开头的连续k个节点序列的最后一个节点。q、p分别为“窗口”开始和结束</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ordert<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            r <span class="token operator">=</span> q<span class="token punctuation">;</span>            sumt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//计算连续k个数的和</span>            <span class="token punctuation">{</span>                sumt <span class="token operator">+</span><span class="token operator">=</span> r<span class="token operator">-></span>data<span class="token punctuation">;</span>                r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sumt <span class="token operator">></span> sum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum <span class="token operator">=</span> sumt<span class="token punctuation">;</span>            result <span class="token operator">=</span> q<span class="token punctuation">;</span>            order <span class="token operator">=</span> ordert<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向后移动尾指针p和q</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"序号%d，data值%d\n"</span><span class="token punctuation">,</span> order<span class="token punctuation">,</span> result<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该算法的时间复杂度为O（n2）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTIwMDExMTI2ODk4?x-oss-process=image/format,png" alt="测试结果"></p><p>若使用“滑动窗口”算法实现，平均使用时间约为&lt;0.1秒。（没有测试更大数据集，因为大数据集会导致建立链表时间过长从而无法实现。）该算法代码见程序实现部分的<code>void Adjmax(link L, int k)</code>函数。</p><p>该函数的时间复杂度为O（n）。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTIwMDExMjExMTQ5?x-oss-process=image/format,png" alt="测试结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
